{"ast":null,"code":"import firebase from \"firebase/app\";\nimport \"firebase/firestore\";\nimport \"firebase/auth\";\nimport jsonInfo from \"../json/jsonInfo.json\";\nimport products from \"../json/products.json\";\nconst firebaseConfig = {\n  apiKey: process.env.REACT_APP_FIREBASE_API_KEY,\n  authDomain: process.env.REACT_APP_FIREBASE_AUTH_DOMAIN,\n  databaseURL: process.env.REACT_APP_FIREBASE_DATABASE_URL,\n  projectId: process.env.REACT_APP_FIREBASE_PROJECTID,\n  storageBucket: process.env.REACT_APP_FIREBASE_STORAGE_BUCKET,\n  messagingSenderId: process.env.REACT_APP_FIREBASE_MESSAGING_SENDER_ID,\n  appId: process.env.REACT_APP_FIREBASE_APPID,\n  measurementId: process.env.REACT_APP_FIREBASE_MEASUREMENTID\n};\nfirebase.initializeApp(firebaseConfig);\nconst productsCollectionRef = firebase.firestore().collection(\"products\");\nconst productsDocRef = productsCollectionRef.doc(\"json\");\nconst allProductsCollectionRef = productsDocRef.collection(\"allProducts\");\nconst allOrdersCollectionRef = firebase.firestore().collection(\"allOrders\");\nconst auth = firebase.auth();\nexport const getProductById = async productId => {\n  // REFERENCE PRODUCTS COLLECTION\n  const doc = await allProductsCollectionRef.doc(productId).get();\n  return doc.data();\n};\nexport const getProducts = async url => {\n  const collection = jsonInfo.find(element => element.url === url);\n  const collectionName = collection.name || \"allProducts\";\n  let jsonProducts = []; // QUERY PRODUCTS\n\n  let querySnapshot;\n  if (collectionName === \"allProducts\") querySnapshot = await allProductsCollectionRef.get();else querySnapshot = await allProductsCollectionRef.where(\"category\", \"==\", collectionName).get();\n  querySnapshot.forEach(doc => {\n    jsonProducts.push(doc.data());\n  });\n  return jsonProducts;\n};\nexport const feedProducts = () => {\n  products.forEach(product => {\n    const docRef = allProductsCollectionRef.doc();\n    const id = docRef.id;\n    const user = auth.currentUser._id; // Store Data for Aggregation Queries\n\n    docRef.set({ ...product,\n      user,\n      id\n    });\n  });\n};\nexport const signInWithEmailPassword = async (email, password) => {\n  return await auth.signInWithEmailAndPassword(email, password);\n};\nexport const registerWithEmailPassword = async (email, password, displayName) => {\n  await auth.createUserWithEmailAndPassword(email, password);\n  const user = auth.currentUser;\n  await user.updateProfile({\n    displayName\n  });\n  return user;\n};\nexport const updateUserInfoApi = async (email, password, displayName) => {\n  const user = auth.currentUser;\n  if (displayName) await user.updateProfile({\n    displayName\n  });\n  if (email) await user.updateEmail(String(email));\n  if (password) await user.updatePassword(password);\n  return user;\n};\nexport const createOrderApi = async order => {\n  const user = auth.currentUser.uid;\n  const orderRef = await allOrdersCollectionRef.doc();\n  const id = orderRef.id; // Store Data for Aggregation Queries\n\n  await orderRef.set({ ...order,\n    id,\n    user\n  });\n  return { ...order,\n    id\n  };\n};\nexport const getOrderById = async orderId => {\n  const doc = await allOrdersCollectionRef.doc(orderId).get();\n  return doc.data();\n};\nexport const getOrderByUser = async () => {\n  const user = auth.currentUser.uid;\n  let jsonOrders = []; // QUERY Orders\n\n  const querySnapshot = await allOrdersCollectionRef.where(\"user\", \"==\", user).get();\n  querySnapshot.forEach(doc => {\n    jsonOrders.push(doc.data());\n  });\n  return jsonOrders;\n};\nexport const signOut = () => {\n  auth.signOut();\n}; // export const postChatContent = (senderName, message) => {\n//   // REFERENCE CHATROOM DOCUMENT\n//   let chatroomDocRef = firebase.firestore()\n//     .collection(\"chatrooms\")\n//     .doc(\"chatroom2\");\n//   // REFERENCE CHATROOM MESSAGES\n//   let messagesCollectionRef = chatroomDocRef.collection(\"messages\");\n//   messagesCollectionRef.add({\n//     senderName,\n//     message,\n//     timeStamp: Date.now(),\n//   });\n// }\n// export const authenticateAnonymously = () => {\n//   return firebase.auth().signInAnonymously();\n// };\n// export const checkLoginApi = () => {\n//   const user = auth.currentUser;\n//   return user.uid?  true : false;\n// }","map":{"version":3,"sources":["C:/Users/yujaa/Desktop/yourhome/src/api/index.js"],"names":["firebase","jsonInfo","products","firebaseConfig","apiKey","process","env","REACT_APP_FIREBASE_API_KEY","authDomain","REACT_APP_FIREBASE_AUTH_DOMAIN","databaseURL","REACT_APP_FIREBASE_DATABASE_URL","projectId","REACT_APP_FIREBASE_PROJECTID","storageBucket","REACT_APP_FIREBASE_STORAGE_BUCKET","messagingSenderId","REACT_APP_FIREBASE_MESSAGING_SENDER_ID","appId","REACT_APP_FIREBASE_APPID","measurementId","REACT_APP_FIREBASE_MEASUREMENTID","initializeApp","productsCollectionRef","firestore","collection","productsDocRef","doc","allProductsCollectionRef","allOrdersCollectionRef","auth","getProductById","productId","get","data","getProducts","url","find","element","collectionName","name","jsonProducts","querySnapshot","where","forEach","push","feedProducts","product","docRef","id","user","currentUser","_id","set","signInWithEmailPassword","email","password","signInWithEmailAndPassword","registerWithEmailPassword","displayName","createUserWithEmailAndPassword","updateProfile","updateUserInfoApi","updateEmail","String","updatePassword","createOrderApi","order","uid","orderRef","getOrderById","orderId","getOrderByUser","jsonOrders","signOut"],"mappings":"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","sourcesContent":["import firebase from \"firebase/app\";\nimport \"firebase/firestore\";\nimport \"firebase/auth\";\nimport jsonInfo from \"../json/jsonInfo.json\";\nimport products from \"../json/products.json\";\n\n\nconst firebaseConfig = {\n  apiKey: process.env.REACT_APP_FIREBASE_API_KEY,\n  authDomain: process.env.REACT_APP_FIREBASE_AUTH_DOMAIN,\n  databaseURL: process.env.REACT_APP_FIREBASE_DATABASE_URL,\n  projectId: process.env.REACT_APP_FIREBASE_PROJECTID,\n  storageBucket: process.env.REACT_APP_FIREBASE_STORAGE_BUCKET,\n  messagingSenderId: process.env.REACT_APP_FIREBASE_MESSAGING_SENDER_ID,\n  appId: process.env.REACT_APP_FIREBASE_APPID,\n  measurementId: process.env.REACT_APP_FIREBASE_MEASUREMENTID\n\n};\n\n\nfirebase.initializeApp(firebaseConfig);\nconst productsCollectionRef = firebase.firestore().collection(\"products\");\nconst productsDocRef = productsCollectionRef.doc(\"json\");\nconst allProductsCollectionRef = productsDocRef.collection(\"allProducts\");\nconst allOrdersCollectionRef = firebase.firestore().collection(\"allOrders\");\n\nconst auth = firebase.auth();\n\nexport const getProductById = async (productId) => {\n  // REFERENCE PRODUCTS COLLECTION\n  const doc = await allProductsCollectionRef.doc(productId).get();\n  return doc.data()\n}\n\nexport const getProducts = async (url) => {\n  const collection = jsonInfo.find(element => element.url === url);\n  const collectionName = collection.name || \"allProducts\";\n  let jsonProducts = [];\n\n  // QUERY PRODUCTS\n  let querySnapshot;\n  if (collectionName === \"allProducts\")\n    querySnapshot = await allProductsCollectionRef.get();\n  else\n    querySnapshot = await allProductsCollectionRef.where(\"category\", \"==\", collectionName).get();\n  querySnapshot.forEach((doc) => {\n    jsonProducts.push(doc.data());\n  });\n  return jsonProducts;\n}\nexport const feedProducts = () => {\n  products.forEach((product) => {\n    const docRef = allProductsCollectionRef.doc();\n    const id = docRef.id;\n    const user = auth.currentUser._id;\n\n    // Store Data for Aggregation Queries\n    docRef.set({\n      ...product,\n      user,\n      id\n    });\n  })\n}\n\nexport const signInWithEmailPassword = async (email, password) => {\n  return await auth.signInWithEmailAndPassword(email, password);\n}\n\nexport const registerWithEmailPassword = async (email, password, displayName) => {\n  await auth.createUserWithEmailAndPassword(email, password);\n  const user = auth.currentUser;\n  await user.updateProfile({ displayName })\n  return user;\n}\n\nexport const updateUserInfoApi = async (email, password, displayName) => {\n  const user = auth.currentUser;\n  if(displayName)\n    await user.updateProfile({ displayName });\n  if(email)\n    await user.updateEmail(String(email));\n  if(password)\n    await user.updatePassword(password);\n  return user;\n}\nexport const createOrderApi = async (order) => {\n  const user = auth.currentUser.uid;\n  const orderRef = await allOrdersCollectionRef.doc();\n  const id = orderRef.id;\n  // Store Data for Aggregation Queries\n  await orderRef.set({\n    ...order,\n    id,\n    user\n  });\n  return { ...order, id };\n\n}\n\nexport const getOrderById = async (orderId) => {\n  const doc = await allOrdersCollectionRef.doc(orderId).get();\n  return doc.data()\n}\n\nexport const getOrderByUser = async () => {\n  const user = auth.currentUser.uid;\n  let jsonOrders = [];\n\n  // QUERY Orders\n  const querySnapshot = await allOrdersCollectionRef.where(\"user\", \"==\", user).get();\n  querySnapshot.forEach((doc) => {\n    jsonOrders.push(doc.data());\n  });\n  return jsonOrders;\n}\n\nexport const signOut = () => {\n  auth.signOut();\n}\n\n\n// export const postChatContent = (senderName, message) => {\n//   // REFERENCE CHATROOM DOCUMENT\n//   let chatroomDocRef = firebase.firestore()\n//     .collection(\"chatrooms\")\n//     .doc(\"chatroom2\");\n//   // REFERENCE CHATROOM MESSAGES\n//   let messagesCollectionRef = chatroomDocRef.collection(\"messages\");\n//   messagesCollectionRef.add({\n//     senderName,\n//     message,\n//     timeStamp: Date.now(),\n//   });\n// }\n\n// export const authenticateAnonymously = () => {\n//   return firebase.auth().signInAnonymously();\n// };\n\n\n\n// export const checkLoginApi = () => {\n//   const user = auth.currentUser;\n//   return user.uid?  true : false;\n// }"]},"metadata":{},"sourceType":"module"}