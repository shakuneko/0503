{"ast":null,"code":"import firebase from \"firebase/app\";\nimport \"firebase/firestore\";\nimport \"firebase/auth\";\nimport jsonInfo from \"../json/jsonInfo.json\";\nimport products from \"../json/products.json\"; // import products from \"../json/products.json\";\n// import inspirations from \"../json/inspirations.json\";\n// import shop from \"../json/shop.json\";\n// import designers from \"../json/designers.json\";\n// import aboutus from \"../json/about-us.json\";\n\nconst firebaseConfig = {\n  apiKey: process.env.REACT_APP_FIREBASE_API_KEY,\n  authDomain: process.env.REACT_APP_FIREBASE_AUTH_DOMAIN,\n  databaseURL: process.env.REACT_APP_FIREBASE_DATABASE_URL,\n  projectId: process.env.REACT_APP_FIREBASE_PROJECTID,\n  storageBucket: process.env.REACT_APP_FIREBASE_STORAGE_BUCKET,\n  messagingSenderId: process.env.REACT_APP_FIREBASE_MESSAGING_SENDER_ID,\n  appId: process.env.REACT_APP_FIREBASE_APPID,\n  measurementId: process.env.REACT_APP_FIREBASE_MEASUREMENTID\n};\nfirebase.initializeApp(firebaseConfig);\nconst allOrdersCollectionRef = firebase.firestore().collection(\"allOrders\"); // export const getJSON = (url) => {\n//   switch (url) {\n//     case \"/\":\n//       return products;\n//     case \"/inspirations\":\n//       return inspirations;\n//     case \"/shop\":\n//       return shop;\n//     case \"/designers\":\n//       return designers;\n//     case \"/about-us\":\n//       return aboutus;\n//     default:\n//       return products;\n//   }\n// };\n\nconst auth = firebase.auth();\nconst productsCollectionRef = firebase.firestore().collection(\"products\");\nconst productsDocRef = productsCollectionRef.doc(\"json\");\nconst allProductsCollectionRef = productsDocRef.collection(\"allProducts\"); // const allOrdersCollectionRef = firebase.firestore().collection(\"allOrders\");\n\nexport const getProductById = async productId => {\n  // REFERENCE PRODUCTS COLLECTION\n  const doc = await allProductsCollectionRef.doc(productId).get();\n  return doc.data();\n};\nexport const postChatContent = (senderName, message) => {\n  // REFERENCE CHATROOM DOCUMENT\n  let chatroomDocRef = firebase.firestore().collection(\"chatrooms\").doc(\"chatroom2\"); // REFERENCE CHATROOM MESSAGES\n\n  let messagesCollectionRef = chatroomDocRef.collection(\"messages\");\n  messagesCollectionRef.add({\n    senderName,\n    message,\n    timeStamp: Date.now()\n  });\n};\nexport const authenticateAnonymously = () => {\n  return firebase.auth().signInAnonymously();\n};\nexport const signInWithEmailPassword = async (email, password) => {\n  return await auth.signInWithEmailAndPassword(email, password);\n};\nexport const registerWithEmailPassword = async (email, password, displayName) => {\n  await auth.createUserWithEmailAndPassword(email, password);\n  const user = auth.currentUser;\n  await user.updateProfile({\n    displayName\n  });\n  return user;\n};\nexport const createOrderApi = async order => {\n  const user = auth.currentUser.uid;\n  const orderRef = await allOrdersCollectionRef.doc();\n  const id = orderRef.id; // Store Data for Aggregation Queries\n\n  await orderRef.set({ ...order,\n    id,\n    user\n  });\n  return { ...order,\n    id\n  };\n};\nexport const getOrderById = async orderId => {\n  const doc = await allOrdersCollectionRef.doc(orderId).get();\n  return doc.data();\n};\nexport const updateUserInfoApi = async (email, password, displayName) => {\n  const user = auth.currentUser;\n  if (displayName) await user.updateProfile({\n    displayName\n  });\n  if (email) await user.updateEmail(String(email));\n  if (password) await user.updatePassword(password);\n  return user;\n};\nexport const checkLoginApi = () => {\n  const user = auth.currentUser;\n  return user.uid ? true : false;\n};\nexport const getOrderByUser = async () => {\n  const user = auth.currentUser.uid;\n  let jsonOrders = []; // QUERY Orders\n\n  const querySnapshot = await allOrdersCollectionRef.where(\"user\", \"==\", user).get();\n  querySnapshot.forEach(doc => {\n    jsonOrders.push(doc.data());\n  });\n  return jsonOrders;\n};\nexport const signOut = () => {\n  auth.signOut();\n};","map":{"version":3,"sources":["C:/Users/yujaa/Desktop/yourhome/src/api/index.js"],"names":["firebase","jsonInfo","products","firebaseConfig","apiKey","process","env","REACT_APP_FIREBASE_API_KEY","authDomain","REACT_APP_FIREBASE_AUTH_DOMAIN","databaseURL","REACT_APP_FIREBASE_DATABASE_URL","projectId","REACT_APP_FIREBASE_PROJECTID","storageBucket","REACT_APP_FIREBASE_STORAGE_BUCKET","messagingSenderId","REACT_APP_FIREBASE_MESSAGING_SENDER_ID","appId","REACT_APP_FIREBASE_APPID","measurementId","REACT_APP_FIREBASE_MEASUREMENTID","initializeApp","allOrdersCollectionRef","firestore","collection","auth","productsCollectionRef","productsDocRef","doc","allProductsCollectionRef","getProductById","productId","get","data","postChatContent","senderName","message","chatroomDocRef","messagesCollectionRef","add","timeStamp","Date","now","authenticateAnonymously","signInAnonymously","signInWithEmailPassword","email","password","signInWithEmailAndPassword","registerWithEmailPassword","displayName","createUserWithEmailAndPassword","user","currentUser","updateProfile","createOrderApi","order","uid","orderRef","id","set","getOrderById","orderId","updateUserInfoApi","updateEmail","String","updatePassword","checkLoginApi","getOrderByUser","jsonOrders","querySnapshot","where","forEach","push","signOut"],"mappings":"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","sourcesContent":["import firebase from \"firebase/app\";\nimport \"firebase/firestore\";\nimport \"firebase/auth\";\n\nimport jsonInfo from \"../json/jsonInfo.json\";\nimport products from \"../json/products.json\";\n// import products from \"../json/products.json\";\n// import inspirations from \"../json/inspirations.json\";\n// import shop from \"../json/shop.json\";\n// import designers from \"../json/designers.json\";\n// import aboutus from \"../json/about-us.json\";\n\nconst firebaseConfig = {\n  apiKey: process.env.REACT_APP_FIREBASE_API_KEY,\n  authDomain: process.env.REACT_APP_FIREBASE_AUTH_DOMAIN,\n  databaseURL: process.env.REACT_APP_FIREBASE_DATABASE_URL,\n  projectId: process.env.REACT_APP_FIREBASE_PROJECTID,\n  storageBucket: process.env.REACT_APP_FIREBASE_STORAGE_BUCKET,\n  messagingSenderId: process.env.REACT_APP_FIREBASE_MESSAGING_SENDER_ID,\n  appId: process.env.REACT_APP_FIREBASE_APPID,\n  measurementId: process.env.REACT_APP_FIREBASE_MEASUREMENTID\n\n};\n\nfirebase.initializeApp(firebaseConfig);\nconst allOrdersCollectionRef = firebase.firestore().collection(\"allOrders\");\n\n// export const getJSON = (url) => {\n//   switch (url) {\n//     case \"/\":\n//       return products;\n//     case \"/inspirations\":\n//       return inspirations;\n//     case \"/shop\":\n//       return shop;\n//     case \"/designers\":\n//       return designers;\n//     case \"/about-us\":\n//       return aboutus;\n//     default:\n//       return products;\n//   }\n// };\n\nconst auth = firebase.auth();\n\nconst productsCollectionRef = firebase.firestore().collection(\"products\");\nconst productsDocRef = productsCollectionRef.doc(\"json\");\nconst allProductsCollectionRef = productsDocRef.collection(\"allProducts\");\n// const allOrdersCollectionRef = firebase.firestore().collection(\"allOrders\");\n\n\nexport const getProductById = async (productId) => {\n  // REFERENCE PRODUCTS COLLECTION\n  const doc = await allProductsCollectionRef.doc(productId).get();\n  return doc.data()\n}\n\nexport const postChatContent = (senderName, message) => {\n  // REFERENCE CHATROOM DOCUMENT\n  let chatroomDocRef = firebase.firestore()\n    .collection(\"chatrooms\")\n    .doc(\"chatroom2\");\n  // REFERENCE CHATROOM MESSAGES\n  let messagesCollectionRef = chatroomDocRef.collection(\"messages\");\n  messagesCollectionRef.add({\n    senderName,\n    message,\n    timeStamp: Date.now(),\n  });\n}\n\nexport const authenticateAnonymously = () => {\n  return firebase.auth().signInAnonymously();\n};\n\n\n\nexport const signInWithEmailPassword = async (email, password) => {\n  return await auth.signInWithEmailAndPassword(email, password);\n}\n\nexport const registerWithEmailPassword = async (email, password, displayName) => {\n  await auth.createUserWithEmailAndPassword(email, password);\n  const user = auth.currentUser;\n  await user.updateProfile({ displayName })\n  return user;\n}\n\n\n\nexport const createOrderApi = async (order) => {\n  const user = auth.currentUser.uid;\n  const orderRef = await allOrdersCollectionRef.doc();\n  const id = orderRef.id;\n  // Store Data for Aggregation Queries\n  await orderRef.set({\n    ...order,\n    id,\n    user\n  });\n  return { ...order, id };\n\n}\n\nexport const getOrderById = async (orderId) => {\n  const doc = await allOrdersCollectionRef.doc(orderId).get();\n  return doc.data()\n}\n\nexport const updateUserInfoApi = async (email, password, displayName) => {\n  const user = auth.currentUser;\n  if(displayName)\n    await user.updateProfile({ displayName });\n  if(email)\n    await user.updateEmail(String(email));\n  if(password)\n    await user.updatePassword(password);\n  return user;\n}\nexport const checkLoginApi = () => {\n  const user = auth.currentUser;\n  return user.uid?  true : false;\n}\n\nexport const getOrderByUser = async () => {\n  const user = auth.currentUser.uid;\n  let jsonOrders = [];\n\n  // QUERY Orders\n  const querySnapshot = await allOrdersCollectionRef.where(\"user\", \"==\", user).get();\n  querySnapshot.forEach((doc) => {\n    jsonOrders.push(doc.data());\n  });\n  return jsonOrders;\n}\n\nexport const signOut = () => {\n  auth.signOut();\n}"]},"metadata":{},"sourceType":"module"}